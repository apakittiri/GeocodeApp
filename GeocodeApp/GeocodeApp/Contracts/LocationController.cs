// Template: Base Controller (ApiControllerBase.t4) version 3.0

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;
using GeocodeApp.Api.Models;

// Do not modify this file. This code was generated by RAML Web Api 2 Scaffolder

namespace GeocodeApp.Api
{
    [RoutePrefix("location")]
    public partial class LocationController : ApiController
    {


        /// <summary>
		/// Get address with geocode points using Id
		/// </summary>
		/// <param name="id"></param>
		/// <returns>LocationIdGetOKResponseContent</returns>
        [ResponseType(typeof(LocationIdGetOKResponseContent))]
        [HttpGet]
        [Route("{id}")]
        public virtual async Task<IHttpActionResult> GetBase([FromUri] string id)
        {
            // Do not modify this code
            return await ((ILocationController)this).Get(id);
        }

        /// <summary>
		/// Get current weather for the location
		/// </summary>
		/// <param name="id"></param>
		/// <returns>LocationIdWeatherCurrentGetOKResponseContent</returns>
        [ResponseType(typeof(LocationIdWeatherCurrentGetOKResponseContent))]
        [HttpGet]
        [Route("{id}/weather/current")]
        public virtual async Task<IHttpActionResult> GetCurrentBase([FromUri] string id)
        {
            // Do not modify this code
            return await ((ILocationController)this).GetCurrent(id);
        }

        /// <summary>
		/// Get current weather for the location
		/// </summary>
		/// <param name="id"></param>
		/// <returns>LocationIdWeatherForcastGetOKResponseContent</returns>
        [ResponseType(typeof(LocationIdWeatherForcastGetOKResponseContent))]
        [HttpGet]
        [Route("{id}/weather/forcast")]
        public virtual async Task<IHttpActionResult> GetForcastBase([FromUri] string id)
        {
            // Do not modify this code
            return await ((ILocationController)this).GetForcast(id);
        }

        /// <summary>
		/// Get location by address
		/// </summary>
		/// <param name="country"></param>
		/// <param name="statecode"></param>
		/// <param name="postalcode"></param>
		/// <param name="city"></param>
		/// <param name="streetaddress"></param>
		/// <returns>LocationAddressCountryStatecodePostalcodeCityStreetaddressGetOKResponseContent</returns>
        [ResponseType(typeof(LocationAddressCountryStatecodePostalcodeCityStreetaddressGetOKResponseContent))]
        [HttpGet]
        [Route("address/{country}/{statecode}/{postalcode}/{city}/{streetaddress}")]
        public virtual async Task<IHttpActionResult> GetAddressByCountryStatecodePostalcodeCityStreetaddressBase([FromUri] string country,[FromUri] string statecode,[FromUri] string postalcode,[FromUri] string city,[FromUri] string streetaddress)
        {
            // Do not modify this code
            return await ((ILocationController)this).GetAddressByCountryStatecodePostalcodeCityStreetaddress(country,statecode,postalcode,city,streetaddress);
        }

        /// <summary>
		/// Get location by points
		/// </summary>
		/// <param name="latitude"></param>
		/// <param name="longitude"></param>
		/// <returns>LocationPointsLatitudeLongitudeGetOKResponseContent</returns>
        [ResponseType(typeof(LocationPointsLatitudeLongitudeGetOKResponseContent))]
        [HttpGet]
        [Route("points/{latitude}/{longitude}")]
        public virtual async Task<IHttpActionResult> GetPointsByLatitudeLongitudeBase([FromUri] string latitude,[FromUri] string longitude)
        {
            // Do not modify this code
            return await ((ILocationController)this).GetPointsByLatitudeLongitude(latitude,longitude);
        }
    }
}
